// Code generated by go-bindata.
// sources:
// test_data/test.png
// DO NOT EDIT!

package epdfuse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xdd\x21\x6b\x55\x61\x1c\xc7\xf1\xff\xb3\x20\x6e\xba\xb4\x22\x06\x95\x15\xb1\xcf\x62\xbb\x72\xc5\x5d\xc3\x10\xb1\x08\x86\xfb\x12\x06\x32\x98\x45\xd0\x26\x06\x9b\x41\x04\x83\xcd\x60\xb2\x29\x62\xf4\x1d\x58\x0c\x96\x95\xe1\x1b\x50\xc3\x91\x05\xc3\xda\x2e\xec\xb7\x7b\x76\xee\xe7\x03\x17\x6e\x7c\xc2\x97\x27\xfd\x38\xcf\xf3\xbb\x5b\xb7\x57\x57\x2e\xae\x54\xd5\xea\x64\x73\x7c\xaf\xaa\xbe\x55\xd5\xf4\xec\x52\x55\x7d\xdf\x79\x7f\xa7\xaa\x96\xb7\x37\x1f\x3c\xaa\x3a\xb7\x76\xf0\x6b\xf5\xfa\xcd\x85\xaa\x2b\x35\x19\x8f\xee\xef\xb6\xba\xfc\xf4\xe7\x93\xd6\x75\x5d\x71\x64\xad\xb5\x79\x1f\xe1\x74\x58\x9a\xf7\x01\x18\x26\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x4e\xde\x8f\xb5\x17\x7b\xff\xb7\x00\xf3\x3e\xcb\x89\x10\x19\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\xd1\xcf\xb0\xae\xfd\xbe\xfa\x6e\xa1\xb6\x00\xc3\xd6\xcf\xc8\x38\xf5\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\xe2\x90\xf5\xd1\xcb\x8d\xe3\xde\x02\x88\x8c\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\xc2\x0b\x7d\xb3\xf1\x04\xe4\x11\xb9\xb1\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\xcd\xac\xdb\xdb\xbf\xe4\xbb\x00\xb3\x68\xa3\xe9\x97\xb7\x4a\x23\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x8e\x3b\xac\x8d\x1b\x9f\x76\x6c\x01\x38\xc4\xed\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x83\xf1\xe7\xfc\xc7\xeb\xfd\xdc\x02\x88\x8c\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x10\x16\x11\xc2\x22\x42\x58\x44\x08\x8b\x08\x61\x11\x21\x2c\x22\x84\x45\x84\xb0\x88\x58\xa8\xb0\xf6\x77\xff\x3e\xac\x6a\xdb\xfd\xdb\x02\x0c\xdb\xe3\xaf\x67\x3e\xaf\x2f\xbf\xfa\x75\xf0\x7f\x72\x6b\x6b\xfc\xe1\xe6\xf4\xd9\xbf\x00\x00\x00\xff\xff\x25\x48\xc1\x70\x12\xe2\x00\x00")

func testPngBytes() ([]byte, error) {
	return bindataRead(
		_testPng,
		"test.png",
	)
}

func testPng() (*asset, error) {
	bytes, err := testPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.png", size: 57874, mode: os.FileMode(420), modTime: time.Unix(1490459761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test.png": testPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test.png": &bintree{testPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
